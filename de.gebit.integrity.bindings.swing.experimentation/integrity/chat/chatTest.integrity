import swing.launch.*
import swing.basic.*

packagedef swing.chat with

	// The master process will be the "Client A" 
	forkdef clientB "Client B"

	suitedef main with
		
		suite launchChatAppAndConnect roleButton: "roleAChoice"
		suite launchChatAppAndConnect roleButton: "roleBChoice" on clientB
		
		suite sendMessageFromAToB message: "Foo!"
		
		suite sendMessageFromBToA message: "Bar!"
		
		suite sendMessageFromBToA message: "Foobar!"
		
		tabletest listText name: "messageList"
			| position | =         |
			| 1        | "Bar!"    |
			| 2        | "Foobar!" |
			
		tabletest listText name: "messageList"
			| =         |
			| "Bar!"    |
			| "Foobar!" |
		
		//call tools.authorAssist
		
				
		suite killChatApp
		suite killChatApp on clientB
	
	suiteend
			
	
	suitedef launchChatAppAndConnect gets roleButton with
		suite launchChatApp
		call checkRadioButton name: roleButton
		call clickButton name: "connectButton"
	suiteend
	
	suitedef launchChatApp with
		call launchApp mainClass: "de.gebit.integrity.bindings.swing.experimentation.chat.Chat"
		test isAppAlive
	suiteend
 	
	suitedef killChatApp with
		call killApp
	suiteend

	suitedef sendMessageFromAToB gets message with
		suite sendMessage message: message
		suite checkMessageReceived message: message on clientB
	suiteend
	
	suitedef sendMessageFromBToA gets message with
		suite sendMessage message: message on clientB
		suite checkMessageReceived message: message
	suiteend
	
	suitedef sendMessage gets message with
		call setTextFieldContent name: "messageField" text: message
		call clickButton name: "sendButton"
	suiteend
	
	suitedef checkMessageReceived gets message with
		// received messages are added at the bottom of the list, so we can check the last one
		test listEntryBottomUp name: "messageList" position: 0 = message
	suiteend

packageend