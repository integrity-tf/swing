import swing.launch.*
import swing.basic.*
import gui.swing.*

packagedef swing.chat with

	// The master process will be the "Client A" 
	forkdef clientB "Client B"

	suitedef main with
		
		suite launchChatAppAndConnect roleButton: "roleAChoice"
		suite launchChatAppAndConnect roleButton: "roleBChoice" on clientB
		
		suite sendMessageFromAToB message: "Foo!"
		
		suite sendMessageFromBToA message: "Bar!"
		
		suite sendMessageFromBToA message: "Foobar!"
		
		tabletest list.entryText name: "messageList"
			| index | =         |
			| 1     | "Bar!"    |
			| 2     | "Foobar!" |
			
		tabletest list.entryValue name: "messageList"
			| =         |
			| "Bar!"    |
			| "Foobar!" |
			
		// Do some selection testing, just because it's cool :)
		call list.selectEntries name: "messageList" index: 1
		test list.selectedEntriesText name: "messageList" = "Bar!"
		test list.selectedIndices name: "messageList" = 1
		
		call list.selectEntries name: "messageList" index: 1, 2
		test list.selectedEntriesValue name: "messageList" = "Bar!", "Foobar!"
		test list.selectedIndices name: "messageList" = 1, 2
		
		call tools.authorAssist
		
				
		suite killChatApp
		suite killChatApp on clientB
	
	suiteend
			
	
	suitedef launchChatAppAndConnect gets roleButton with
		suite launchChatApp
		call radiobutton.select name: roleButton
		call button.click name: "connectButton"
	suiteend
	
	suitedef launchChatApp with
		call lifecycle.launchApp mainClass: "de.gebit.integrity.bindings.swing.experimentation.chat.Chat"
		test lifecycle.isAppAlive
	suiteend
 	
	suitedef killChatApp with
		call lifecycle.killApp
	suiteend

	suitedef sendMessageFromAToB gets message with
		suite sendMessage message: message
		suite checkMessageReceived message: message on clientB
	suiteend
	
	suitedef sendMessageFromBToA gets message with
		suite sendMessage message: message on clientB
		suite checkMessageReceived message: message
	suiteend
	
	suitedef sendMessage gets message with
		call textfield.setText name: "messageField" text: message
		call button.click name: "sendButton"
	suiteend
	
	suitedef checkMessageReceived gets message with
		// received messages are added at the bottom of the list, so we can check the last one
		variable listEntryCount
		call list.getEntryCount name: "messageList" -> listEntryCount
		
		test list.entryText name: "messageList" index: listEntryCount = message
	suiteend

packageend